#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

struct Edge {
    int to, weight;
};

typedef pair<int, int> pii;  // Typedef for convenience

vector<Edge> primMST(const vector<vector<Edge>>& graph, int start) {
    int n = graph.size();
    vector<bool> visited(n, false);
    vector<int> dist(n, INT_MAX);
    vector<Edge> parent(n, { -1, 0 });
    
    priority_queue<pii, vector<pii>, greater<pii>> pq;  // Using the typedef here
    pq.push({ 0, start });
    dist[start] = 0;
    
    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();
        visited[u] = true;
        
        for (const Edge& edge : graph[u]) {
            int v = edge.to, weight = edge.weight;
            if (!visited[v] && weight < dist[v]) {
                dist[v] = weight;
                parent[v] = { u, weight };
                pq.push({ dist[v], v });
            }
        }
    }
    
    return parent;
}

int main() {
    int n, m;
    cin >> n >> m;
    
    vector<vector<Edge>> graph(n);
    
    for (int i = 0; i < m; ++i) {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u].push_back({ v, w });
        graph[v].push_back({ u, w });
    }
    
    int startVertex;
    cin >> startVertex;
    
    vector<Edge> minimumSpanningTree = primMST(graph, startVertex);
    
    cout << "Minimum Spanning Tree Edges:" << endl;
    for (int i = 0; i < n; ++i) {
        if (minimumSpanningTree[i].to != -1) {
            cout << i << " - " << minimumSpanningTree[i].to << " : " << minimumSpanningTree[i].weight << endl;
        }
    }
    
    return 0;
}
