#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

int n; // Number of cities
vector<vector<int>> graph; // Graph representing distances between cities

int minCost = INT_MAX;
vector<int> bestPath;

void tspBranchAndBound(int currCity, vector<bool>& visited, int cost, vector<int>& path) {
    if (path.size() == n) { // All cities visited
        cost += graph[currCity][0]; // Return to starting city
        if (cost < minCost) {
            minCost = cost;
            bestPath = path;
        }
        return;
    }

    for (int nextCity = 0; nextCity < n; ++nextCity) {
        if (!visited[nextCity] && graph[currCity][nextCity] != 0) {
            visited[nextCity] = true;
            path.push_back(nextCity);
            tspBranchAndBound(nextCity, visited, cost + graph[currCity][nextCity], path);
            visited[nextCity] = false;
            path.pop_back();
        }
    }
}

int main() {
    cin >> n;

    graph.assign(n, vector<int>(n, 0));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> graph[i][j];
        }
    }

    vector<int> path;
    path.push_back(0); // Starting from city 0

    vector<bool> visited(n, false);
    visited[0] = true; // Mark the starting city as visited

    tspBranchAndBound(0, visited, 0, path);

    cout << "Optimal TSP Path: ";
    for (int city : bestPath) {
        cout << city << " ";
    }
    cout << "0" << endl; // Return to starting city

    cout << "Optimal TSP Cost: " << minCost << endl;

    return 0;
}
